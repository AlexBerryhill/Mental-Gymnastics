import time
import sys
from swarm import TelloManager  # Assumes your swarm classes (TelloManager, etc.) are in swarm.py

def mirror_command(command: str) -> str:
    """
    Given a command string, return the mirrored command for the follower drone.
    Directional commands are inverted (e.g., left->right, forward->back, cw->ccw).
    The flip command is also mirrored.
    
    Parameters:
        command (str): The command for the leader drone.
        
    Returns:
        str: The command to send to the follower drone.
    """
    tokens = command.strip().split()
    if not tokens:
        return command

    cmd_word = tokens[0].lower()

    # Handle flip commands: flip l -> flip r, etc.
    if cmd_word == "flip":
        if len(tokens) > 1:
            flip_map = {"l": "r", "r": "l", "f": "b", "b": "f"}
            flip_direction = tokens[1].lower()
            if flip_direction in flip_map:
                tokens[1] = flip_map[flip_direction]
        return " ".join(tokens)

    # Define directional inversion for mirror
    direction_map = {
        "left": "right",
        "right": "left",
        "forward": "back",
        "back": "forward",
        "cw": "ccw",
        "ccw": "cw"
    }

    if cmd_word in direction_map:
        tokens[0] = direction_map[cmd_word]
        return " ".join(tokens)

    # For all other commands (takeoff, land, up, down, etc.), mirror them unchanged.
    return command

def main():
    # Create the TelloManager and search for two drones.
    manager = TelloManager()
    print("Scanning for 2 drones...")
    manager.find_avaliable_tello(2)
    tello_list = manager.get_tello_list()
    if len(tello_list) < 2:
        print("Not enough drones found. Please ensure two drones are powered on and in AP mode.")
        sys.exit(1)
        
    # Assign the two drones:
    drone_leader = tello_list[0]
    drone_follower = tello_list[1]
    print("Leader Drone:", drone_leader)
    print("Follower Drone:", drone_follower)

    # Put both drones in SDK command mode
    print("Entering command mode on both drones...")
    drone_leader.send_command("command")
    drone_follower.send_command("command")
    time.sleep(2)  # allow some time for response

    print("\nReady to mirror commands. Enter commands for the LEADER drone.")
    print("They will be automatically mirrored to the follower drone.")
    print("Type 'exit' to quit.\n")
    
    try:
        while True:
            leader_command = input("Leader command: ").strip()
            if leader_command.lower() == "exit":
                break
            if leader_command == "":
                continue

            # Compute the mirror command for the follower drone.
            follower_command = mirror_command(leader_command)

            print(f"Sending to Leader:  {leader_command}")
            print(f"Sending to Follower: {follower_command}")

            # Send the commands to both drones.
            drone_leader.send_command(leader_command)
            drone_follower.send_command(follower_command)

    except KeyboardInterrupt:
        print("\nKeyboard interrupt received. Exiting...")
    finally:
        # Land both drones safely.
        print("Landing both drones...")
        drone_leader.send_command("land")
        drone_follower.send_command("land")
        time.sleep(5)
        print("Finished.")

if __name__ == "__main__":
    main()